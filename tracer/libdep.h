/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "libdep.go"

#include <stdint.h>

typedef struct {
    uint8_t data[20];
} Address;

typedef struct {
    uint8_t data[32];
} Hash;

typedef struct {
    uint8_t *data;
    int      size;
} SizedArray;

typedef struct {
    Hash *data;
    int   size;
} Stack;

typedef uint64_t (*get_nonce_function) (Address address);
inline uint64_t get_nonce_bridge(get_nonce_function f, Address address) {
    return f(address);
}

typedef SizedArray (*get_code_function) (Address address);
inline SizedArray get_code_bridge(get_code_function f, Address address) {
    return f(address);
}

typedef void (*set_solidity_log_function) (uint8_t type, Hash data);
inline SizedArray set_solidity_log_bridge(set_solidity_log_function f, uint8_t type, Hash data) {
    f(type, data);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void RegisterGetNonce(get_nonce_function pointer);
extern void RegisterGetCode(get_code_function pointer);
extern void RegisterGetSolidityLog(set_solidity_log_function pointer);
extern void InitDep(char* cfg);
extern void StartTransactionRecording(GoUint8 isCreate, Address addr, SizedArray input, GoUint64 block, GoUint64 timestamp, Address origin, Hash txHash, SizedArray code, GoUint8 isSelfdestruct6780, GoUint8 isRandom);
extern void EndTransactionRecording();
extern void HandleOpcode(Stack stack, SizedArray memory, Address addr, GoUint64 pc, GoUint8 op, GoUint8 isInvalid, GoUint8 hasError);
extern void HandleEnter(Address to, SizedArray input);
extern void HandleFault(GoUint8 op);
extern void HandleExit(SizedArray output, GoUint8 hasError);

#ifdef __cplusplus
}
#endif
